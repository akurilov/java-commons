description = "Common functionality Java library"

buildscript {
	repositories {
		mavenCentral()
	}
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "signing"
group = "com.github.akurilov"
version = "2.3.0"

sourceCompatibility = 11
targetCompatibility = 11


ext {
	moduleName = "com.github.akurilov.commons"
	depVersion = [
	    "juel" : "2.2.7",
	]
}

repositories {
	mavenCentral()
}

wrapper {
	gradleVersion = "4.10.3"
}

dependencies {
	compile(
		"de.odysseus.juel:juel-api:${depVersion.juel}",
		"de.odysseus.juel:juel-impl:${depVersion.juel}",
	)
	testCompile("junit:junit:4.12")
}

compileJava {
	inputs.property("moduleName", moduleName)
	doFirst {
		options.compilerArgs = [
			'--module-path', classpath.asPath,
		]
		classpath = files()
	}
}

compileTestJava {
	inputs.property("moduleName", moduleName)
	doFirst {
		options.compilerArgs = [
			'--module-path', classpath.asPath,
			'--add-modules', 'junit',
			'--add-reads', "$moduleName=junit",
			'--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
		]
		classpath = files()
	}
}

jar {
	manifest {
		attributes (
			"Automatic-Module-Name": moduleName,
			"Implementation-Version": version,
			"Implementation-Title": rootProject.name,
		)
	}
	inputs.property("moduleName", moduleName)
	from configurations.compile.collect {
		it.isDirectory() ? it : zipTree(it)
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

javadoc {
	options.addStringOption("-module-path", classpath.asPath)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

test {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
	inputs.property("moduleName", moduleName)
	doFirst {
		jvmArgs = [
			'--module-path', classpath.asPath,
			'--add-modules', 'ALL-MODULE-PATH',
			'--add-reads', "$moduleName=junit",
			'--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
		]
		classpath = files()
	}
	jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
	jvmArgs "-XX:MaxDirectMemorySize=1g"
	jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"
	maxHeapSize "1g"
	systemProperty "com.sun.management.jmxremote", "true"
	systemProperty "com.sun.management.jmxremote.port", "9010"
	systemProperty "com.sun.management.jmxremote.rmi.port", "9010"
	systemProperty "com.sun.management.jmxremote.local.only", "false"
	systemProperty "com.sun.management.jmxremote.authenticate", "false"
	systemProperty "com.sun.management.jmxremote.ssl", "false"
	testLogging {
		events "passed", "skipped", "failed", "standardOut"
		showExceptions = true
		showStandardStreams = true
	}
}

signing {
	required {
		gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}

// see http://central.sonatype.org/pages/gradle.html for details
uploadArchives {

	def ossrhUsername = project.hasProperty("ossrhUsername") ?
		project.property("ossrhUsername") : null
	def ossrhPassword = project.hasProperty("ossrhPassword") ?
		project.property("ossrhPassword") : null

	repositories {
		mavenDeployer {
			beforeDeployment {
				MavenDeployment deployment -> signing.signPom(deployment)
			}

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom {

				name = rootProject.name
				groupId = rootProject.group

				project {
					description = rootProject.description

					url "https://github.com/akurilov/java-commons"

					scm {
						connection "https://github.com/akurilov/java-commons.git"
						developerConnection "https://github.com/akurilov/java-commons.git"
						url "https://github.com/akurilov/java-commons.git"
					}

					licenses {
						license {
							name "Apache License 2.0"
							url "https://github.com/akurilov/java-commons/blob/master/LICENSE"
						}
					}

					developers {
						developer {
							id "akurilov"
							name "Andrey Kurilov"
							email "akurilov123@gmail.com"
						}
					}
				}
			}
		}
	}
}

task printVersion {
	group = "versioning"
	description = "Prints version."
	doLast { logger.quiet "Java-commons version: $version" }
}
